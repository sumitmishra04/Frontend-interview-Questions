// https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
// No matter how many times the user fires the event, the attached function will be executed only
// debounce: after the specified time once the user stops firing the event.
// throttle: once in a given time interval.

// Debounce:
var timer
const debounce = (fn, delay) => {
    clearTimeout(timer)
    timer = setTimeout(fn, delay)
}
function hello () {
    console.log('hello')
}
for(let i =0; i< 10; i++) {
debounce(hello, 1000)
}

// Throttling: 
let throttlePause; 
const throttle = (callback, time) => {
  if (throttlePause) return;
  throttlePause = true;
  setTimeout(() => {
    callback();
    throttlePause = false;
  }, time);
};
window.addEventListener("scroll", () => { 
    throttle(handleScrollAnimation, 250);
});


// JS
// 1. Debounce
let timer;
function debounce(cb, delay) {
  clearTimeout(timer);
  timer = setTimeout(cb, delay);
}

function debounce(cb, delay) {
  let timer;
  return function (...args) {
    const self = this;
    clearTimeout(timer);
    timer = setTimeout(() => cb.apply(self, args), delay);
  };
}

// 2. Throttling

function throttle(cb, delay) {
  let throttlePause;
  return function (...args) {
    const self = this;
    if (throttlePause) return;
    throttlePause = true;
    cb(self, args);
    setTimeout(() => {
      throttlePause = false;
    }, delay);
  };
}

// let throttlePause;
// const throttle = (callback, time) => {
//   if (throttlePause) return;
//   throttlePause = true;
//   setTimeout(() => {
//     callback();
//     throttlePause = false;
//   }, time);
// };
// window.addEventListener("scroll", () => {
//     throttle(handleScrollAnimation, 250);
// });

