// 1. given an array of words, group words that have same unique characters
// 2. make api call of an array of urls with maxApiCall cap such that nt more than
// maxApiCall(eg: 2) will be fired.

// Function to make the API call for a single URL
async function makeApiCall(url) {
  try {
    const response = await fetch(url)
    const data = await response.json()
    return data
  } catch (error) {
    console.error(`Error fetching ${url}:`, error)
    return null
  }
}

// Function to make API calls with a maximum cap
async function makeApiCallsWithCap(urls, maxApiCall) {
  const results = []
  const queue = []

  async function processQueue() {
    while (queue.length > 0) {
      const url = queue.shift()
      const result = await makeApiCall(url)
      results.push(result)
    }
  }

  for (const url of urls) {
    queue.push(url)
    if (queue.length >= maxApiCall) {
      await processQueue()
    }
  }

  // Process any remaining items in the queue
  await processQueue()

  return results
}

// Example usage:
const urls = [
  "https://api.example.com/data/1",
  "https://api.example.com/data/2",
  "https://api.example.com/data/3",
  // Add more URLs here...
]

const maxApiCall = 2
makeApiCallsWithCap(urls, maxApiCall)
  .then((results) => {
    console.log("API call results:", results)
  })
  .catch((error) => {
    console.error("Error making API calls:", error)
  })
